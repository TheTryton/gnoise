#pragma once

#include "../../common.hpp"

// GRADIENT NOISE

constexpr std::string_view gpu_generator_utility_gradient_noise_1D =
"typedef struct __attribute__ ((packed)) _vec2f\n"
"{\n"
"   float x,y;\n"
"} vec2f;\n"

"typedef struct __attribute__ ((packed)) _vec1f\n"
"{\n"
"   float x;\n"
"} vec1f;\n"

"typedef struct __attribute__ ((packed)) _vec1i\n"
"{\n"
"   int x;\n"
"} vec1i;\n"

"typedef struct __attribute__ ((packed)) _range1f\n"
"{\n"
"   vec2f x;\n"
"} range1f;\n"

"typedef struct __attribute__ ((packed)) _precision1\n"
"{\n"
"   unsigned long int x;\n"
"} precision1;\n"

"float interpolate_linear(float a, float b, float x)\n"
"{\n"
"   return (1.0f - x) * a + x * b;\n"
"}\n"

"float map_cubic_scurve(float x)\n"
"{\n"
"   return x * x * (3.0f - 2.0f * x);\n"
"}\n"

"float map_quintic_scurve(float x)\n"
"{\n"
"   float a3 = x * x * x;\n"
"   float a4 = a3 * x;\n"
"   float a5 = a4 * x;\n"
"   return 6.0f * a5 - 15.0f * a4 + 10.0f * a3;\n"
"}\n"

"float make_int32_range(float x)\n"
"{\n"
"   if(x >= 1073741824.0f)\n"
"   {\n"
"       return 2.0f * fmod(x, 1073741824.0f) - 1073741824.0f;\n"
"   }\n"
"   if(x <= -1073741824.0f)\n"
"   {\n"
"       return 2.0f * fmod(x, 1073741824.0f) + 1073741824.0f;\n"
"   }\n"
"   return x;\n"
"}\n"

"float gradient_noise_1D(vec1f v, vec1i vi, int seed, global float* randoms, global int* generator_defaults)\n"
"{\n"
"   int i = (generator_defaults[0] * vi.x + generator_defaults[4] * seed) & 0xffffffff;\n"
"   i ^= (i >> generator_defaults[5]);\n"
"   i &= 0xff;\n"
"   vec1f coords_vg;\n"
"   coords_vg.x = randoms[(i << 2) ];\n"
"   vec1f coords_vp;\n"
"   coords_vp.x = (v.x - vi.x);\n"
"   return (coords_vg.x * coords_vp.x) * 2.12f;\n"
"}\n"

"float gradient_coherent_noise_1D(vec1f v, int seed, global float* randoms, global int* generator_defaults, global int* config_i) {\n"
"   vec1f v0;\n"
"   vec1f v1;\n"
"   v0.x = v.x > 0.0 ? (int)v.x : (int)v.x - 1; \n"
"   v1.x = v0.x + 1.0f; \n"
"   vec1f vs;\n"
"   if (config_i[2] == 0)\n"
"   {\n"
"       vs.x = v.x - v0.x;\n"
"   }\n"
"   else if (config_i[2] == 1)\n"
"   {\n"
"       vs.x = map_cubic_scurve(v.x - v0.x); \n"
"   }\n"
"   else if(config_i[2] == 2)\n"
"   {\n"
"       vs.x = map_quintic_scurve(v.x - v0.x);\n"
"   }\n"
"   vec1i v_i;\n"
"   v_i.x = v0.x;\n"
"   float x0 = gradient_noise_1D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v1.x;\n"
"   float x1 = gradient_noise_1D(v, v_i, seed, randoms, generator_defaults);\n"

"   return interpolate_linear(x0, x1, vs.x);\n"
"}\n";

constexpr std::string_view gpu_generator_utility_gradient_noise_2D =
"typedef struct __attribute__ ((packed)) _vec2f\n"
"{\n"
"   float x,y;\n"
"} vec2f;\n"

"typedef struct __attribute__ ((packed)) _vec2i\n"
"{\n"
"   int x,y;\n"
"} vec2i;\n"

"typedef struct __attribute__ ((packed)) _range2f\n"
"{\n"
"   vec2f x,y;\n"
"} range2f;\n"

"typedef struct __attribute__ ((packed)) _precision2\n"
"{\n"
"   unsigned long int x,y;\n"
"} precision2;\n"

"float interpolate_linear(float a, float b, float x)\n"
"{\n"
"   return (1.0f - x) * a + x * b;\n"
"}\n"

"float map_cubic_scurve(float x)\n"
"{\n"
"   return x * x * (3.0f - 2.0f * x);\n"
"}\n"

"float map_quintic_scurve(float x)\n"
"{\n"
"   float a3 = x * x * x;\n"
"   float a4 = a3 * x;\n"
"   float a5 = a4 * x;\n"
"   return 6.0f * a5 - 15.0f * a4 + 10.0f * a3;\n"
"}\n"

"float make_int32_range(float x)\n"
"{\n"
"   if(x >= 1073741824.0f)\n"
"   {\n"
"       return 2.0f * fmod(x, 1073741824.0f) - 1073741824.0f;\n"
"   }\n"
"   if(x <= -1073741824.0f)\n"
"   {\n"
"       return 2.0f * fmod(x, 1073741824.0f) + 1073741824.0f;\n"
"   }\n"
"   return x;\n"
"}\n"

"float gradient_noise_2D(vec2f v, vec2i vi, int seed, global float* randoms, global int* generator_defaults)\n"
"{\n"
"   int i = (generator_defaults[0] * vi.x + generator_defaults[1] * vi.y + generator_defaults[4] * seed) & 0xffffffff;\n"
"   i ^= (i >> generator_defaults[5]);\n"
"   i &= 0xff;\n"
"   vec2f coords_vg;\n"
"   coords_vg.x = randoms[(i << 2) ];\n"
"   coords_vg.y = randoms[(i << 2) + 1];\n"
"   vec2f coords_vp;\n"
"   coords_vp.x = (v.x - vi.x);\n"
"   coords_vp.y = (v.y - vi.y);\n"
"   return (coords_vg.x * coords_vp.x + coords_vg.y * coords_vp.y) * 2.12f;\n"
"}\n"

"float gradient_coherent_noise_2D(vec2f v, int seed, global float* randoms, global int* generator_defaults, global int* config_i) {\n"
"   vec2f v0;\n"
"   vec2f v1;\n"
"   v0.x = v.x > 0.0 ? (int)v.x : (int)v.x - 1; \n"
"   v1.x = v0.x + 1.0f; \n"
"   v0.y = v.y > 0.0 ? (int)v.y : (int)v.y - 1;\n"
"   v1.y = v0.y + 1;\n"
"   vec2f vs;\n"
"   if (config_i[2] == 0)\n"
"   {\n"
"       vs.x = v.x - v0.x;\n"
"       vs.y = v.y - v0.y; \n"
"   }\n"
"   else if (config_i[2] == 1)\n"
"   {\n"
"       vs.x = map_cubic_scurve(v.x - v0.x); \n"
"       vs.y = map_cubic_scurve(v.y - v0.y); \n"
"   }\n"
"   else if(config_i[2] == 2)\n"
"   {\n"
"       vs.x = map_quintic_scurve(v.x - v0.x);\n"
"       vs.y = map_quintic_scurve(v.y - v0.y);\n"
"   }\n"
"   vec2i v_i;\n"
"   v_i.x = v0.x;\n"
"   v_i.y = v0.y;\n"
"   float xy00 = gradient_noise_2D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v1.x;\n"
"   v_i.y = v0.y;\n"
"   float xy10 = gradient_noise_2D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v1.x;\n"
"   v_i.y = v1.y;\n"
"   float xy11 = gradient_noise_2D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v0.x;\n"
"   v_i.y = v1.y;\n"
"   float xy01 = gradient_noise_2D(v, v_i, seed, randoms, generator_defaults);\n"
"   xy00 = interpolate_linear(xy00, xy10, vs.x);\n"
"   xy01 = interpolate_linear(xy01, xy11, vs.x);\n"
"   return interpolate_linear(xy00, xy01, vs.y);\n"
"}\n";

constexpr std::string_view gpu_generator_utility_gradient_noise_3D =
"typedef struct __attribute__ ((packed)) _vec2f\n"
"{\n"
"   float x,y;\n"
"} vec2f;\n"

"typedef struct __attribute__ ((packed)) _vec3f\n"
"{\n"
"   float x,y,z;\n"
"} vec3f;\n"

"typedef struct __attribute__ ((packed)) _vec3i\n"
"{\n"
"   int x,y,z;\n"
"} vec3i;\n"

"typedef struct __attribute__ ((packed)) _range3f\n"
"{\n"
"   vec2f x,y,z;\n"
"} range3f;\n"

"typedef struct __attribute__ ((packed)) _precision3\n"
"{\n"
"   unsigned long int x,y,z;\n"
"} precision3;\n"

"float interpolate_linear(float a, float b, float x)\n"
"{\n"
"   return (1.0f - x) * a + x * b;\n"
"}\n"

"float map_cubic_scurve(float x)\n"
"{\n"
"   return x * x * (3.0f - 2.0f * x);\n"
"}\n"

"float map_quintic_scurve(float x)\n"
"{\n"
"   float a3 = x * x * x;\n"
"   float a4 = a3 * x;\n"
"   float a5 = a4 * x;\n"
"   return 6.0f * a5 - 15.0f * a4 + 10.0f * a3;\n"
"}\n"

"float make_int32_range(float x)\n"
"{\n"
"   if(x >= 1073741824.0f)\n"
"   {\n"
"       return 2.0f * fmod(x, 1073741824.0f) - 1073741824.0f;\n"
"   }\n"
"   if(x <= -1073741824.0f)\n"
"   {\n"
"       return 2.0f * fmod(x, 1073741824.0f) + 1073741824.0f;\n"
"   }\n"
"   return x;\n"
"}\n"

"float gradient_noise_3D(vec3f v, vec3i vi, int seed, global float* randoms, global int* generator_defaults)\n"
"{\n"
"   int i = (generator_defaults[0] * vi.x + generator_defaults[1] * vi.y + generator_defaults[2] * vi.z + generator_defaults[4] * seed) & 0xffffffff;\n"
"   i ^= (i >> generator_defaults[5]);\n"
"   i &= 0xff;\n"
"   vec3f coords_vg;\n"
"   coords_vg.x = randoms[(i << 2) ];\n"
"   coords_vg.y = randoms[(i << 2) + 1];\n"
"   coords_vg.z = randoms[(i << 2) + 2];\n"
"   vec3f coords_vp;\n"
"   coords_vp.x = (v.x - vi.x);\n"
"   coords_vp.y = (v.y - vi.y);\n"
"   coords_vp.z = (v.z - vi.z);\n"
"   return (coords_vg.x * coords_vp.x + coords_vg.y * coords_vp.y +  coords_vg.z * coords_vp.z) * 2.12f;\n"
"}\n"

"float gradient_coherent_noise_3D(vec3f v, int seed, global float* randoms, global int* generator_defaults, global int* config_i) {\n"
"   vec3f v0;\n"
"   vec3f v1;\n"
"   v0.x = v.x > 0.0 ? (int)v.x : (int)v.x - 1; \n"
"   v1.x = v0.x + 1.0f; \n"
"   v0.y = v.y > 0.0 ? (int)v.y : (int)v.y - 1;\n"
"   v1.y = v0.y + 1;\n"
"   v0.z = v.z > 0.0 ? (int)v.z : (int)v.z - 1;\n"
"   v1.z = v0.z + 1;\n"
"   vec3f vs;\n"
"   if (config_i[2] == 0)\n"
"   {\n"
"       vs.x = v.x - v0.x;\n"
"       vs.y = v.y - v0.y; \n"
"       vs.z = v.z - v0.z; \n"
"   }\n"
"   else if (config_i[2] == 1)\n"
"   {\n"
"       vs.x = map_cubic_scurve(v.x - v0.x); \n"
"       vs.y = map_cubic_scurve(v.y - v0.y); \n"
"       vs.z = map_cubic_scurve(v.z - v0.z); \n"
"   }\n"
"   else if(config_i[2] == 2)\n"
"   {\n"
"       vs.x = map_quintic_scurve(v.x - v0.x);\n"
"       vs.y = map_quintic_scurve(v.y - v0.y);\n"
"       vs.z = map_quintic_scurve(v.z - v0.z);\n"
"   }\n"
"   vec3i v_i;\n"

"   v_i.x = v0.x;\n"
"   v_i.y = v0.y;\n"
"   v_i.z = v0.z;\n"
"   float xyz000 = gradient_noise_3D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v0.x;\n"
"   v_i.y = v1.y;\n"
"   v_i.z = v0.z;\n"
"   float xyz010 = gradient_noise_3D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v0.x;\n"
"   v_i.y = v0.y;\n"
"   v_i.z = v1.z;\n"
"   float xyz001 = gradient_noise_3D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v0.x;\n"
"   v_i.y = v1.y;\n"
"   v_i.z = v1.z;\n"
"   float xyz011 = gradient_noise_3D(v, v_i, seed, randoms, generator_defaults);\n"

"   v_i.x = v1.x;\n"
"   v_i.y = v0.y;\n"
"   v_i.z = v0.z;\n"
"   float xyz100 = gradient_noise_3D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v1.x;\n"
"   v_i.y = v1.y;\n"
"   v_i.z = v0.z;\n"
"   float xyz110 = gradient_noise_3D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v1.x;\n"
"   v_i.y = v0.y;\n"
"   v_i.z = v1.z;\n"
"   float xyz101 = gradient_noise_3D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v1.x;\n"
"   v_i.y = v1.y;\n"
"   v_i.z = v1.z;\n"
"   float xyz111 = gradient_noise_3D(v, v_i, seed, randoms, generator_defaults);\n"

"   xyz000 = interpolate_linear(xyz000, xyz100, vs.x);\n"
"   xyz010 = interpolate_linear(xyz010, xyz110, vs.x);\n"
"   xyz001 = interpolate_linear(xyz001, xyz101, vs.x);\n"
"   xyz011 = interpolate_linear(xyz011, xyz111, vs.x);\n"

"   xyz000 = interpolate_linear(xyz000, xyz010, vs.y);\n"
"   xyz001 = interpolate_linear(xyz001, xyz011, vs.y);\n"

"   return interpolate_linear(xyz000, xyz001, vs.z);\n"
"}\n";

constexpr std::string_view gpu_generator_utility_gradient_noise_4D =
"typedef struct __attribute__ ((packed)) _vec2f\n"
"{\n"
"   float x,y;\n"
"} vec2f;\n"

"typedef struct __attribute__ ((packed)) _vec4f\n"
"{\n"
"   float x,y,z,w;\n"
"} vec4f;\n"

"typedef struct __attribute__ ((packed)) _vec4i\n"
"{\n"
"   int x,y,z,w;\n"
"} vec4i;\n"

"typedef struct __attribute__ ((packed)) _range4f\n"
"{\n"
"   vec2f x,y,z,w;\n"
"} range4f;\n"

"typedef struct __attribute__ ((packed)) _precision4\n"
"{\n"
"   unsigned long int x,y,z,w;\n"
"} precision4;\n"

"float interpolate_linear(float a, float b, float x)\n"
"{\n"
"   return (1.0f - x) * a + x * b;\n"
"}\n"

"float map_cubic_scurve(float x)\n"
"{\n"
"   return x * x * (3.0f - 2.0f * x);\n"
"}\n"

"float map_quintic_scurve(float x)\n"
"{\n"
"   float a3 = x * x * x;\n"
"   float a4 = a3 * x;\n"
"   float a5 = a4 * x;\n"
"   return 6.0f * a5 - 15.0f * a4 + 10.0f * a3;\n"
"}\n"

"float make_int32_range(float x)\n"
"{\n"
"   if(x >= 1073741824.0f)\n"
"   {\n"
"       return 2.0f * fmod(x, 1073741824.0f) - 1073741824.0f;\n"
"   }\n"
"   if(x <= -1073741824.0f)\n"
"   {\n"
"       return 2.0f * fmod(x, 1073741824.0f) + 1073741824.0f;\n"
"   }\n"
"   return x;\n"
"}\n"

"float gradient_noise_4D(vec4f v, vec4i vi, int seed, global float* randoms, global int* generator_defaults)\n"
"{\n"
"   int i = (generator_defaults[0] * vi.x + generator_defaults[1] * vi.y + generator_defaults[2] * vi.z +  generator_defaults[3] * vi.w + generator_defaults[4] * seed) & 0xffffffff;\n"
"   i ^= (i >> generator_defaults[5]);\n"
"   i &= 0xff;\n"
"   vec4f coords_vg;\n"
"   coords_vg.x = randoms[(i << 2) ];\n"
"   coords_vg.y = randoms[(i << 2) + 1];\n"
"   coords_vg.z = randoms[(i << 2) + 2];\n"
"   coords_vg.w = randoms[(i << 2) + 3];\n"
"   vec4f coords_vp;\n"
"   coords_vp.x = (v.x - vi.x);\n"
"   coords_vp.y = (v.y - vi.y);\n"
"   coords_vp.z = (v.z - vi.z);\n"
"   coords_vp.w = (v.w - vi.w);\n"
"   return (coords_vg.x * coords_vp.x + coords_vg.y * coords_vp.y + coords_vg.z * coords_vp.z + coords_vg.w * coords_vp.w) * 2.12f;\n"
"}\n"

"float gradient_coherent_noise_4D(vec4f v, int seed, global float* randoms, global int* generator_defaults, global int* config_i) {\n"
"   vec4f v0;\n"
"   vec4f v1;\n"
"   v0.x = v.x > 0.0 ? (int)v.x : (int)v.x - 1; \n"
"   v1.x = v0.x + 1.0f; \n"
"   v0.y = v.y > 0.0 ? (int)v.y : (int)v.y - 1;\n"
"   v1.y = v0.y + 1;\n"
"   v0.z = v.z > 0.0 ? (int)v.z : (int)v.z - 1;\n"
"   v1.z = v0.z + 1;\n"
"   v0.w = v.w > 0.0 ? (int)v.w : (int)v.w - 1;\n"
"   v1.w = v0.w + 1;\n"
"   vec4f vs;\n"
"   if (config_i[2] == 0)\n"
"   {\n"
"       vs.x = v.x - v0.x;\n"
"       vs.y = v.y - v0.y; \n"
"       vs.z = v.z - v0.z; \n"
"       vs.w = v.w - v0.w; \n"
"   }\n"
"   else if (config_i[2] == 1)\n"
"   {\n"
"       vs.x = map_cubic_scurve(v.x - v0.x); \n"
"       vs.y = map_cubic_scurve(v.y - v0.y); \n"
"       vs.z = map_cubic_scurve(v.z - v0.z); \n"
"       vs.w = map_cubic_scurve(v.w - v0.w); \n"
"   }\n"
"   else if(config_i[2] == 2)\n"
"   {\n"
"       vs.x = map_quintic_scurve(v.x - v0.x);\n"
"       vs.y = map_quintic_scurve(v.y - v0.y);\n"
"       vs.z = map_quintic_scurve(v.z - v0.z);\n"
"       vs.w = map_quintic_scurve(v.w - v0.w);\n"
"   }\n"
"   vec4i v_i;\n"

"   v_i.x = v0.x;\n"
"   v_i.y = v0.y;\n"
"   v_i.z = v0.z;\n"
"   v_i.w = v0.w;\n"
"   float xyzw0000 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v0.x;\n"
"   v_i.y = v0.y;\n"
"   v_i.z = v1.z;\n"
"   v_i.w = v0.w;\n"
"   float xyzw0010 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v0.x;\n"
"   v_i.y = v0.y;\n"
"   v_i.z = v0.z;\n"
"   v_i.w = v1.w;\n"
"   float xyzw0001 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v0.x;\n"
"   v_i.y = v0.y;\n"
"   v_i.z = v1.z;\n"
"   v_i.w = v1.w;\n"
"   float xyzw0011 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"

"   v_i.x = v0.x;\n"
"   v_i.y = v1.y;\n"
"   v_i.z = v0.z;\n"
"   v_i.w = v0.w;\n"
"   float xyzw0100 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v0.x;\n"
"   v_i.y = v1.y;\n"
"   v_i.z = v1.z;\n"
"   v_i.w = v0.w;\n"
"   float xyzw0110 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v0.x;\n"
"   v_i.y = v1.y;\n"
"   v_i.z = v0.z;\n"
"   v_i.w = v1.w;\n"
"   float xyzw0101 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v0.x;\n"
"   v_i.y = v1.y;\n"
"   v_i.z = v1.z;\n"
"   v_i.w = v1.w;\n"
"   float xyzw0111 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"

"   v_i.x = v1.x;\n"
"   v_i.y = v0.y;\n"
"   v_i.z = v0.z;\n"
"   v_i.w = v0.w;\n"
"   float xyzw1000 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v1.x;\n"
"   v_i.y = v0.y;\n"
"   v_i.z = v1.z;\n"
"   v_i.w = v0.w;\n"
"   float xyzw1010 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v1.x;\n"
"   v_i.y = v0.y;\n"
"   v_i.z = v0.z;\n"
"   v_i.w = v1.w;\n"
"   float xyzw1001 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v1.x;\n"
"   v_i.y = v0.y;\n"
"   v_i.z = v1.z;\n"
"   v_i.w = v1.w;\n"
"   float xyzw1011 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"

"   v_i.x = v1.x;\n"
"   v_i.y = v1.y;\n"
"   v_i.z = v0.z;\n"
"   v_i.w = v0.w;\n"
"   float xyzw1100 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v1.x;\n"
"   v_i.y = v1.y;\n"
"   v_i.z = v1.z;\n"
"   v_i.w = v0.w;\n"
"   float xyzw1110 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v1.x;\n"
"   v_i.y = v1.y;\n"
"   v_i.z = v0.z;\n"
"   v_i.w = v1.w;\n"
"   float xyzw1101 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"
"   v_i.x = v1.x;\n"
"   v_i.y = v1.y;\n"
"   v_i.z = v1.z;\n"
"   v_i.w = v1.w;\n"
"   float xyzw1111 = gradient_noise_4D(v, v_i, seed, randoms, generator_defaults);\n"

"   xyzw0000 = interpolate_linear(xyzw0000, xyzw1000, vs.x);\n"
"   xyzw0100 = interpolate_linear(xyzw0100, xyzw1100, vs.x);\n"
"   xyzw0010 = interpolate_linear(xyzw0010, xyzw1010, vs.x);\n"
"   xyzw0110 = interpolate_linear(xyzw0110, xyzw1110, vs.x);\n"

"   xyzw0001 = interpolate_linear(xyzw0001, xyzw1001, vs.x);\n"
"   xyzw0101 = interpolate_linear(xyzw0101, xyzw1101, vs.x);\n"
"   xyzw0011 = interpolate_linear(xyzw0011, xyzw1011, vs.x);\n"
"   xyzw0111 = interpolate_linear(xyzw0111, xyzw1111, vs.x);\n"

"   xyzw0000 = interpolate_linear(xyzw0000, xyzw0100, vs.y);\n"
"   xyzw0010 = interpolate_linear(xyzw0010, xyzw0110, vs.y);\n"
"   xyzw0001 = interpolate_linear(xyzw0001, xyzw0101, vs.y);\n"
"   xyzw0011 = interpolate_linear(xyzw0011, xyzw0111, vs.y);\n"

"   xyzw0000 = interpolate_linear(xyzw0000, xyzw0010, vs.z);\n"
"   xyzw0001 = interpolate_linear(xyzw0001, xyzw0011, vs.z);\n"

"   return interpolate_linear(xyzw0000, xyzw0001, vs.w);\n"
"}\n";

// VALUE NOISE

constexpr std::string_view gpu_generator_utility_value_noise_1D =
"typedef struct __attribute__ ((packed)) _vec2f\n"
"{\n"
"   float x,y;\n"
"} vec2f;\n"

"typedef struct __attribute__ ((packed)) _vec1f\n"
"{\n"
"   float x;\n"
"} vec1f;\n"

"typedef struct __attribute__ ((packed)) _vec1i\n"
"{\n"
"   int x;\n"
"} vec1i;\n"

"typedef struct __attribute__ ((packed)) _range1f\n"
"{\n"
"   vec2f x;\n"
"} range1f;\n"

"typedef struct __attribute__ ((packed)) _precision1\n"
"{\n"
"   unsigned long int x;\n"
"} precision1;\n"

"float interpolate_linear(float a, float b, float x)\n"
"{\n"
"   return (1.0f - x) * a + x * b;\n"
"}\n"

"float value_noise_1D_int(vec1i v, int seed, global float* randoms, global int* generator_defaults)\n"
"{\n"
"   int n = (generator_defaults[0] * v.x + generator_defaults[4] * seed) & 0xffffffff;\n"
"   n = (n >> 13) ^ n;\n"
"   return (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;\n"
"}\n"

"float value_noise_1D(vec1i v, int seed, global float* randoms, global int* generator_defaults) {\n"
"   return 1.0f - value_noise_1D_int(v, seed, randoms, generator_defaults) / 1073741824.0f;\n"
"}\n";

constexpr std::string_view gpu_generator_utility_value_noise_2D =
"typedef struct __attribute__ ((packed)) _vec2f\n"
"{\n"
"   float x,y;\n"
"} vec2f;\n"

"typedef struct __attribute__ ((packed)) _vec2i\n"
"{\n"
"   int x,y;\n"
"} vec2i;\n"

"typedef struct __attribute__ ((packed)) _range2f\n"
"{\n"
"   vec2f x,y;\n"
"} range2f;\n"

"typedef struct __attribute__ ((packed)) _precision2\n"
"{\n"
"   unsigned long int x,y;\n"
"} precision2;\n"

"float interpolate_linear(float a, float b, float x)\n"
"{\n"
"   return (1.0f - x) * a + x * b;\n"
"}\n"

"float value_noise_2D_int(vec2i v, int seed, global float* randoms, global int* generator_defaults)\n"
"{\n"
"   int n = (generator_defaults[0] * v.x + generator_defaults[1] * v.y + generator_defaults[4] * seed) & 0xffffffff;\n"
"   n = (n >> 13) ^ n;\n"
"   return (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;\n"
"}\n"

"float value_noise_2D(vec2i v, int seed, global float* randoms, global int* generator_defaults) {\n"
"   return 1.0f - value_noise_2D_int(v, seed, randoms, generator_defaults) / 1073741824.0f;\n"
"}\n";

constexpr std::string_view gpu_generator_utility_value_noise_3D =
"typedef struct __attribute__ ((packed)) _vec2f\n"
"{\n"
"   float x,y;\n"
"} vec2f;\n"

"typedef struct __attribute__ ((packed)) _vec3f\n"
"{\n"
"   float x,y,z;\n"
"} vec3f;\n"

"typedef struct __attribute__ ((packed)) _vec3i\n"
"{\n"
"   int x,y,z;\n"
"} vec3i;\n"

"typedef struct __attribute__ ((packed)) _range3f\n"
"{\n"
"   vec2f x,y,z;\n"
"} range3f;\n"

"typedef struct __attribute__ ((packed)) _precision3\n"
"{\n"
"   unsigned long int x,y,z;\n"
"} precision3;\n"


"float interpolate_linear(float a, float b, float x)\n"
"{\n"
"   return (1.0f - x) * a + x * b;\n"
"}\n"

"float value_noise_3D_int(vec3i v, int seed, global float* randoms, global int* generator_defaults)\n"
"{\n"
"   int n = (generator_defaults[0] * v.x + generator_defaults[1] * v.y + generator_defaults[2] * v.z + generator_defaults[4] * seed) & 0xffffffff;\n"
"   n = (n >> 13) ^ n;\n"
"   return (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;\n"
"}\n"

"float value_noise_3D(vec3i v, int seed, global float* randoms, global int* generator_defaults) {\n"
"   return 1.0f - value_noise_3D_int(v, seed, randoms, generator_defaults) / 1073741824.0f;\n"
"}\n";

constexpr std::string_view gpu_generator_utility_value_noise_4D =
"typedef struct __attribute__ ((packed)) _vec2f\n"
"{\n"
"   float x,y;\n"
"} vec2f;\n"

"typedef struct __attribute__ ((packed)) _vec4f\n"
"{\n"
"   float x,y,z,w;\n"
"} vec4f;\n"

"typedef struct __attribute__ ((packed)) _vec4i\n"
"{\n"
"   int x,y,z,w;\n"
"} vec4i;\n"

"typedef struct __attribute__ ((packed)) _range4f\n"
"{\n"
"   vec2f x,y,z,w;\n"
"} range4f;\n"

"typedef struct __attribute__ ((packed)) _precision4\n"
"{\n"
"   unsigned long int x,y,z,w;\n"
"} precision4;\n"

"float interpolate_linear(float a, float b, float x)\n"
"{\n"
"   return (1.0f - x) * a + x * b;\n"
"}\n"

"float value_noise_4D_int(vec4i v, int seed, global float* randoms, global int* generator_defaults)\n"
"{\n"
"   int n = (generator_defaults[0] * v.x + generator_defaults[1] * v.y + generator_defaults[2] * v.z + generator_defaults[3] * v.w + generator_defaults[4] * seed) & 0xffffffff;\n"
"   n = (n >> 13) ^ n;\n"
"   return (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;\n"
"}\n"

"float value_noise_4D(vec4i v, int seed, global float* randoms, global int* generator_defaults) {\n"
"   return 1.0f - value_noise_4D_int(v, seed, randoms, generator_defaults) / 1073741824.0f;\n"
"}\n";